set -U fish_greeting
set -U SXHKD_SHELL sh
set -gx SKIM_DEFAULT_COMMAND "fd --type f"
set -gx BROWSER firefox
set -gx EDITOR hx
set -gx VISUAL hx
set -gx GOPATH $HOME/proj/go
set -gx GOBIN $HOME/.local/bin
set -gx GO111MODULE on
set -gx TD_HOME $HOME/ds/code
set -gx PGHOST /var/run/postgresql
set -gx DS_LOCAL_DATA $HOME/ds/.local/data
set -gx TRAVEL_EXP_DIR $DS_LOCAL_DATA/travel/
set -gx ERL_AFLAGS "+pc unicode -kernel shell_history enabled"
set -gx EMACS $HOME/.local/bin/emacs
set -gx MANPATH (manpath -q)
set -Ux PYENV_ROOT $HOME/.pyenv
set -gx PASSWORD_STORE_DIR $DS_LOCAL_DATA/password-store
set -gx PASSWORD_STORE_GENERATED_LENGTH 20

fish_add_path --prepend --global /usr/lib/llvm-14/bin \
    $HOME/.emacs.d/bin \
    $HOME/.cargo/bin \
    $HOME/.local/bin \
    $HOME/.cache/rebar3/bin \
    $HOME/.luarocks/bin \
    $HOME/.local/bin/zig \
    $PYENV_ROOT/bin \
    $HOME/.roswell/bin \
    /usr/local/go/bin

set -gx TIMELOG {{ .timelog }}

alias .j='just --justfile ~/.user.justfile --working-directory .'
alias apt='doas /usr/bin/apt'
alias nala='doas {{ if eq .chezmoi.hostname "tpt440pdev" -}} /usr/local/bin/nala {{- else -}} /usr/bin/nala {{- end -}}'
alias c='cargo'
alias cm='chezmoi'
alias e='hx'
alias edit='hx'
alias g='git'
alias gvim='neovide'
alias j='just'
alias ledger='ledger -f $TIMELOG'
alias ll='exa --all --long --icons --classify --group-directories-first --sort name --time-style long-iso'
alias neovim='nvim'
alias urlencode='python3 -c "import urllib.parse, sys; print(urllib.parse.quote(sys.argv[1]))"'
alias uuid-nnl="uuid | tr --delete '\n'"
alias vi='nvim'
alias vim='nvim'
alias yless='jless --yaml'

umask 027
zoxide init fish | source
starship init fish | source
source $HOME/.asdf/asdf.fish
jj util completion fish | source

set -gx ATUIN_NOBIND "true"
atuin init fish | source

# bind to ctrl-r in normal and insert mode, add any other bindings you want here too
bind \cr _atuin_search
bind -M insert \cr _atuin_search

gpgconf --launch gpg-agent

if test -z (pgrep ssh-agent | string collect)
    eval (ssh-agent -c)
    set -Ux SSH_AUTH_SOCK $SSH_AUTH_SOCK
    set -Ux SSH_AGENT_PID $SSH_AGENT_PID
end

function add-today-to-travel-exp
    set -l dir $TRAVEL_EXP_DIR(date +%Y/%m)
    mkdir -p $dir
    date -I >>$dir/dates.txt
end

alias ato add-today-to-travel-exp

function clock-in
    date +"i %Y/%m/%d %H:%M:%S e:ds:td:overhead" >> $TIMELOG
end

function clock-out
    date +"o %Y/%m/%d %H:%M:%S" >> $TIMELOG
end

alias ci clock-in
alias co clock-out

function maybe-add-key -a key_name
    ssh-add -l | rg -wq $key_name
    if test $status -ne 0
        ssh-add $HOME/.ssh/id_$key_name
    end
end

function update-repos
    maybe-add-key basbossink-ds
    maybe-add-key basbossink-ds-servers
    pushd $TD_HOME
    fd -uu --max-depth 3 --type d '\.git$' -x sh -c "cd {//}; printf '\n\033[0;32m*****+{//}+*%50s\033[0m\n'| tr ' ' '*' |tr '+' ' '; git fetch --prune --verbose; printf '\n'"
    popd
end

alias urs update-repos

function show-overtime
    set -l today_start (tail -n 20 $TIMELOG | rg (date +%Y/%m/%d) | rg '^i ' | head -1 | cut -d' ' -f2,3 | tr '/:' ' ')
    set -l worked_today (ledger bal --period 'today' | awk '{ print $1 }')
    ledger --daily reg | TODAY_START=$today_start WORKED_TODAY=$worked_today over-time.awk | column --table -s =
end

alias over show-overtime
alias tls tlsum

function jump-to-repo-root
    pushd (git rev-parse --show-toplevel)
    commandline -f repaint
end

alias jrr jump-to-repo-root
bind \eh jump-to-repo-root

function run-ci
    jump-to-repo-root
    TD_LOG_LEVEL=warn c xc
    popd
end

bind \ei run-ci

function git-push-new-branch
    set -l branch_name (git branch --show-current)
    git push -u origin $branch_name
end

alias gpso git-push-new-branch

function search-notes
    pushd $HOME/notes
    kak (sk --ansi -i -c 'rg -i --color=always --line-number "{}"' | awk -F: '{printf"+%s:0 %s", $2, $1}' | string split " ")
    popd
end

alias sn search-notes

function create-note
    gedit $HOME/notes/(date +"%Y_%m_%dT%H_%M_%S.md") &
end

alias note create-note
alias cn create-note

function cmdsave
  set line (echo $history[1])
  the-way cmd $line
end

function cmdsearch
  commandline (the-way search --languages=sh --stdout)
end

if test -e ~/.local/bin/erl/25.0.3/activate.fish
	. ~/.local/bin/erl/25.0.3/activate.fish
end

{{- if eq .chezmoi.hostname "tpt440pdev" }}
direnv hook fish | source
{{- end }}

function vterm_printf;
    if begin; [  -n "$TMUX" ]  ; and  string match -q -r "screen|tmux" "$TERM"; end
        # tell tmux to pass the escape sequences through
        printf "\ePtmux;\e\e]%s\007\e\\" "$argv"
    else if string match -q -- "screen*" "$TERM"
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$argv"
    else
        printf "\e]%s\e\\" "$argv"
    end
end

if [ "$INSIDE_EMACS" = 'vterm' ]
    function clear
        vterm_printf "51;Evterm-clear-scrollback";
        tput clear;
    end
end


function vterm_prompt_end;
    vterm_printf '51;A'(whoami)'@'(hostname)':'(pwd)
end

functions --copy fish_prompt vterm_old_fish_prompt

function fish_prompt --description 'Write out the prompt; do not replace this. Instead, put this at end of your file.'
    # Remove the trailing newline from the original prompt. This is done
    # using the string builtin from fish, but to make sure any escape codes
    # are correctly interpreted, use %b for printf.
    printf "%b" (string join "\n" (vterm_old_fish_prompt))
    vterm_prompt_end
end

function vterm_cmd --description 'Run an Emacs command among the ones been defined in vterm-eval-cmds.'
    set -l vterm_elisp ()
    for arg in $argv
        set -a vterm_elisp (printf '"%s" ' (string replace -a -r '([\\\\"])' '\\\\\\\\$1' $arg))
    end
    vterm_printf '51;E'(string join '' $vterm_elisp)
end

function find_file;
    set -q argv[1]; or set argv[1] "."
    vterm_cmd find-file (realpath "$argv")
end
